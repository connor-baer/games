---
import { actions } from 'astro:actions';
import { z } from 'astro/zod';

import Layout from '../../../../../layouts/Standard.astro';
import TricksForm from '../../../../../components/TricksForm.svelte';
import { getGame, getPlayers, getScores } from '../../../../../db';
import { getMaxRounds } from '../../../../../utils/game';

const schema = z.object({
  gameId: z.string(),
  round: z.coerce.number(),
});

const { data, error } = schema.safeParse(Astro.params);

// This should never happen
if (error) {
  return Astro.redirect('/404');
}

const { gameId, round } = data;

const game = await getGame(gameId);

if (!game) {
  return Astro.redirect('/404');
}

const players = await getPlayers(gameId, round);
const scores = await getScores(gameId, round);
const maxRounds = getMaxRounds(players.length);

const result = Astro.getActionResult(actions.updateTricks);

if (result && !result.error) {
  if (round === maxRounds || round > maxRounds) {
    return Astro.redirect(`/game/${gameId}/scores`);
  }
  return Astro.redirect(`/game/${gameId}/round/${round + 1}/dealer`);
}

const description = 'Count how many tricks each player managed to take.';
---

<Layout
  title={`Round ${round} of ${maxRounds}`}
  description={description}
  link={{ label: 'Scores', href: `/game/${gameId}/scores` }}
>
  <h2>Tricks</h2>
  <p>{description}</p>

  <TricksForm
    client:load
    gameId={gameId}
    round={round}
    players={players}
    scores={scores}
  />
</Layout>

<style>
  p {
    margin-bottom: var(--layout-gutter);
  }
</style>
